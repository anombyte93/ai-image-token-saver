# AIImageTokenSaver
# Tray utility that resizes clipboard images and estimates Claude API token savings


from PIL import ImageGrab, Image
import os
import time
import tempfile
import io
import base64
import json
import pyperclip
import threading
from pystray import Icon, MenuItem, Menu
from PIL import Image as PILImage
from dotenv import load_dotenv

load_dotenv()

MAX_WIDTH = int(os.getenv("MAX_WIDTH", 640))
WEBP_QUALITY = int(os.getenv("WEBP_QUALITY", 80))
TOKEN_COST_PER_1K = float(os.getenv("CLAUDE_TOKEN_COST", 0.003))  # USD per 1K Claude input tokens

stats = {
    "original_tokens": 0,
    "optimized_tokens": 0
}


def resize_image(image: Image.Image) -> Image.Image:
    width, height = image.size
    if width <= MAX_WIDTH:
        return image
    new_height = int((MAX_WIDTH / width) * height)
    return image.resize((MAX_WIDTH, new_height), Image.Resampling.LANCZOS)


def encode_image_to_base64(image: Image.Image, format="WEBP", quality=WEBP_QUALITY) -> (str, int):
    buffer = io.BytesIO()
    image.save(buffer, format=format, quality=quality)
    byte_data = buffer.getvalue()
    base64_string = base64.b64encode(byte_data).decode("utf-8")
    return base64_string, len(base64_string)


def estimate_tokens(base64_len: int) -> int:
    return int(base64_len / 4)


def generate_payload(b64: str) -> str:
    return json.dumps({
        "type": "image",
        "source": {
            "type": "base64",
            "media_type": "image/webp",
            "data": b64
        }
    }, indent=2)


def monitor_clipboard():
    last_image = None
    while True:
        try:
            image = ImageGrab.grabclipboard()
            if isinstance(image, Image.Image) and image != last_image:
                last_image = image
                resized = resize_image(image)

                b64_orig, len_orig = encode_image_to_base64(image, format="PNG")
                b64_resized, len_resized = encode_image_to_base64(resized, format="WEBP", quality=WEBP_QUALITY)

                tokens_orig = estimate_tokens(len_orig)
                tokens_resized = estimate_tokens(len_resized)
                saved_tokens = tokens_orig - tokens_resized
                stats["original_tokens"] += tokens_orig
                stats["optimized_tokens"] += tokens_resized

                payload = generate_payload(b64_resized)
                pyperclip.copy(payload)

                print(f"\nüñºÔ∏è Optimized image detected!")
                print(f"üì¶ Original tokens: {tokens_orig:,}")
                print(f"üìâ Resized tokens:  {tokens_resized:,}")
                print(f"üí∏ Saved tokens:    {saved_tokens:,} (~${saved_tokens / 1000 * TOKEN_COST_PER_1K:.4f})")

            time.sleep(1)
        except Exception as e:
            print(f"Error: {e}")
            time.sleep(2)


def get_tooltip():
    saved_tokens = stats["original_tokens"] - stats["optimized_tokens"]
    saved_dollars = saved_tokens / 1000 * TOKEN_COST_PER_1K
    return f"Saved {saved_tokens:,} tokens (~${saved_dollars:.2f})"

def confirm_uninstall():
    import tkinter
    from tkinter import messagebox
    import subprocess

    root = tkinter.Tk()
    root.withdraw()
    if messagebox.askyesno("Uninstall AIImageTokenSaver", "Are you sure you want to uninstall this app?"):
        uninstall()

def uninstall():
    import sys
    import shutil
    import os
    import platform
    import subprocess

    logs = os.path.expanduser("~/.ai_image_token_saver/")
    try:
        if os.path.exists(logs):
            shutil.rmtree(logs)

        if platform.system() == "Linux":
            os.remove(os.path.expanduser("~/.config/autostart/ai-image-token-saver.desktop"))
        elif platform.system() == "Windows":
            import winshell
            startup = winshell.startup()
            os.remove(os.path.join(startup, "AIImageTokenSaver.lnk"))

        subprocess.run([sys.executable, "-m", "pip", "uninstall", "-y", "pillow", "pyperclip", "pystray", "python-dotenv"])

        os.remove(sys.argv[0])
    except Exception as e:
        print(f"Uninstall error: {e}")
    finally:
        os._exit(0)



def create_icon():
    icon_path = os.path.join(os.path.dirname(__file__), "tray_icon.png")
    image = PILImage.open(icon_path)
return Icon("AIImageTokenSaver", image, "AIImageTokenSaver", menu=Menu(
    MenuItem(lambda: get_tooltip(), None, enabled=False),
    MenuItem("Uninstall", lambda icon, item: confirm_uninstall()),
    MenuItem("Quit", lambda icon, item: icon.stop())
))



def run():
    t = threading.Thread(target=monitor_clipboard, daemon=True)
    t.start()
    create_icon().run()

def add_to_startup():
    import winshell
    import sys
    from win32com.client import Dispatch

    startup_path = winshell.startup()
    shortcut_path = os.path.join(startup_path, "AIImageTokenSaver.lnk")
    target = sys.executable
    script = os.path.abspath(__file__)

    shell = Dispatch('WScript.Shell')
    shortcut = shell.CreateShortcut(shortcut_path)
    shortcut.TargetPath = target
    shortcut.Arguments = f'"{script}"'
    shortcut.WorkingDirectory = os.path.dirname(script)
    shortcut.IconLocation = os.path.join(os.path.dirname(script), "tray_icon.ico")
    shortcut.save()


if __name__ == "__main__":
    add_to_startup()
    run()
